
import os

import tensorflow as tf
import scipy
import numpy as np
import architecture.config as config
from architecture.EnhanceNet import EnhanceNet

# Dataset to debug on
debug_dataset = config.TEST_DIR
model_name = "baseline"

def visual_debug(param, test_files):
    '''
    Provides a visual demonstrating the
    model's performance on a particular dataset.
    In particular, given a list of image names,
    saves the ground truth, distored, and predicted
    image inside the debug folder
    '''

    evaluate_model = EnhanceNet(param)
    evaluate_model.build()
    saver = tf.train.Saver(max_to_keep = 1)
    input = self.input_op(data, "val")
    iterator = input.make_initializable_iterator()
    self.input_data = iterator.get_next()
    with tf.Session() as sess:
        saver.restore(sess, self.config.checkpoints+'checkpoint')
        sess.run(tf.global_variables_initializer())
        test_handle = sess.run(iterator.string_handle())
        sess.run(iterator.initializer)
        distorted = sess.run([input], )
    print(distorted)
    for i in range(param.batch_size): 
        scipy.misc.imsave("./debug/" + str(i) + "distorted.jpg", np.squeeze(distorted[i,:,:,:]))
        scipy.misc.imsave("./debug/" + str(i) + "pred.jpg", np.squeeze(pred[i,:,:,:]))
        scipy.misc.imsave("./debug/" + str(i) + "truth.jpg", np.squeeze(truth[i,:,:,:]))


def main():
    tf.set_random_seed(12345)
    param = config.Config(is_new=False, path="./experiments/baseline")
    test_files = [os.path.join(debug_dataset, f) for f in os.listdir(debug_dataset)
                  if f.endswith('.jpg') or f.endswith('.png')]
    visual_debug(param, test_files)

if __name__=="__main__":
    main()
